// <auto-generated />
using System;
using Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.Cidade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("DATETIME")
                        .HasColumnName("criado_em");

                    b.Property<bool>("EhAtivo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(200)")
                        .HasColumnName("Nome");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("CHAR(2)")
                        .HasColumnName("UF");

                    b.Property<DateTime?>("UltimaAtualizacaoEm")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ultima_atualizacao_em");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "EhAtivo" }, "ix_id_ativo");

                    b.HasIndex(new[] { "Nome", "UF", "EhAtivo" }, "ix_nome_uf_ativo");

                    b.ToTable("Cidade", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pessoa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("CidadeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("CHAR(11)")
                        .HasColumnName("CPF");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("DATETIME")
                        .HasColumnName("criado_em");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Data_Nascimento");

                    b.Property<bool>("EhAtivo")
                        .HasColumnType("bit")
                        .HasColumnName("ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(300)")
                        .HasColumnName("Nome");

                    b.Property<DateTime?>("UltimaAtualizacaoEm")
                        .HasColumnType("DATETIME")
                        .HasColumnName("ultima_atualizacao_em");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex(new[] { "Cpf", "EhAtivo" }, "ix_cpf_ativo");

                    b.HasIndex(new[] { "Id", "EhAtivo" }, "ix_id_ativo")
                        .HasDatabaseName("ix_id_ativo1");

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pessoa", b =>
                {
                    b.HasOne("Domain.Entities.Cidade", "Cidade")
                        .WithMany("Pessoas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");
                });

            modelBuilder.Entity("Domain.Entities.Cidade", b =>
                {
                    b.Navigation("Pessoas");
                });
#pragma warning restore 612, 618
        }
    }
}
